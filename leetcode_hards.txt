// Leetcode 23 - Merge k Sorted Lists

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def __init__(self):
        self.node_map = {}
        
    def iterate(self, node):
        if node != None:
            self.node_map[node] = node.val
            self.iterate(node.next)
            
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        nodes = []
        for i in lists:
            self.iterate(i)
        sorted_map = dict(sorted(self.node_map.items(), key=lambda item: item[1], reverse=False))
        for i in sorted_map:
            i.next = None
            nodes.append(i)
        if len(nodes) == 0:
            return None
        for i in range(len(nodes)-1):
            nodes[i].next = nodes[i+1]
        return nodes[0]

// Leetcode 25 - Reverse Nodes in k-Group

class Solution25:
    def __init__(self):
        self.nodes = []
        
    def iterate(self, head):
        if head != None:
            self.nodes.append(head)
            self.iterate(head.next)
    
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        self.iterate(head)
        temp = []
        groups = []
        
        for i in self.nodes:
            i.next = None
        
        for i in range(len(self.nodes)):
            temp.append(self.nodes[i])
            if (i+1) % k == 0:
                temp = temp[::-1]
                for j in temp:
                    groups.append(j)
                temp = []
        
        if len(temp) != 0:
            for i in temp:
                groups.append(i)
        
        for i in range(len(groups)-1):
            groups[i].next = groups[i+1]
            
        return groups[0]

// Leetcode 6336 - Design Graph With Shortest Path Calculator

class Graph6336:

    def __init__(self, n: int, edges: List[List[int]]):
        self.n = n
        self.edges = [[] for _ in range(n)]
        for u, v, w in edges:
            self.edges[u].append((v, w))

    def addEdge(self, edge: List[int]) -> None:
        u, v, w = edge
        self.edges[u].append((v, w))

    def shortestPath(self, node1: int, node2: int) -> int:
        # Initialize distances to infinity
        distances = [float('inf')] * self.n

        # Initialize the distance of the source node to 0
        distances[node1] = 0

        # Initialize visited set
        visited = set()

        while node1 not in visited:
            visited.add(node1)

            # Update distances for adjacent nodes
            for neighbor, cost in self.edges[node1]:
                if distances[neighbor] > distances[node1] + cost:
                    distances[neighbor] = distances[node1] + cost

            # Find the next unvisited node with the shortest distance
            min_distance = float('inf')
            for i in range(self.n):
                if i not in visited and distances[i] < min_distance:
                    node1 = i
                    min_distance = distances[i]

        return -1 if distances[node2] == float('inf') else distances[node2]



# Your Graph object will be instantiated and called as such:
# obj = Graph(n, edges)
# obj.addEdge(edge)
# param_2 = obj.shortestPath(node1,node2)

// Leetcode 2658 - Maximum Number of Fish in a Grid

class Solution2658 {
    public int dfs(int[][] grid, boolean[][] visited, int i, int j) {
        int m = grid.length;
        int n = grid[0].length;
        visited[i][j] = true;
        int fish = grid[i][j];
        grid[i][j] = 0; // Catch all the fish at this cell
        int maxFish = fish;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] > 0 && !visited[x][y]) {
                maxFish += dfs(grid, visited, x, y);
            }
        }
        grid[i][j] = fish; // Put back the fish at this cell
        return maxFish;
    }
    public int findMaxFish(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int maxFish = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    // If the current cell contains fish, try starting from it and see how many fish can be caught
                    boolean[][] visited = new boolean[m][n];
                    maxFish = Math.max(maxFish, dfs(grid, visited, i, j));
                }
            }
        }
        return maxFish;
    }
}

// Leetcode 329 - Longest Increasing Path in a Matrix

class Solution329:
    def __init__(self):
        self.m, self.n, self.max_moves = 0, 0, 1
        self.dp = {} 
    
    def verify(self, i, j):
        if i < 0 or j < 0 or i >= self.m or j >= self.n:
            return False
        return True 
    
    def dfs(self, grid, i, j):
        points = [(i, j+1), (i, j-1), (i-1, j), (i+1, j)]
        for a in points:
            if self.verify(a[0], a[1]):
                if grid[i][j] > grid[a[0]][a[1]]:
                    if a not in self.dp:
                        if (i,j) not in self.dp:
                            self.dp[(i,j)] = 1 + self.dfs(grid, a[0], a[1])
                        else:
                            self.dp[(i,j)] = max(self.dp[(i,j)], 1 + self.dfs(grid, a[0], a[1]))
                    else:
                        if (i,j) not in self.dp:
                            self.dp[(i,j)] = 1 + self.dp[a] 
                        else:
                            self.dp[(i,j)] = max(self.dp[(i,j)], 1 + self.dp[a])

        if (i,j) not in self.dp:
            return 1
        else:
            return self.dp[(i,j)]
        
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        self.m = len(matrix)
        self.n = len(matrix[0])
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                self.dfs(matrix, i, j)
                if (i,j) in self.dp:
                    self.max_moves = max(self.max_moves, self.dp[(i,j)])
        
        return self.max_moves

// Leetcode 239 - Sliding Window Maximum 

class Solution239 {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int[] maxima = new int[nums.length-k+1];
        int windowStart = 0;
        int maximum = 0;
        Map<Integer, Integer> map = new TreeMap<Integer, Integer>(Collections.reverseOrder());
        
        for(int i=0; i < nums.length; i++){
            if( !map.containsKey(nums[i]) ) map.put(nums[i], 1);
            else map.put(nums[i], map.get(nums[i])+1);
            if( i - windowStart == k - 1 ){
                for(int j : map.keySet()){
                    maximum = j;
                    break;
                }
                maxima[i-k+1] = maximum;
                if( map.get(nums[windowStart]) == 1 ) map.remove(nums[windowStart]);
                else map.put(nums[windowStart], map.get(nums[windowStart])-1);
                windowStart++;
            }
        }
            
        return maxima;
    }
}

// Leetcode 113 - Path Sum II

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution113:
    def dfs(self, root, path, path_sum):
        if root.left != None:
            self.dfs(root.left, path+str(root.left.val)+',', path_sum+root.left.val)
        if root.right != None:
            self.dfs(root.right, path+str(root.right.val)+',', path_sum+root.right.val)
        if path_sum == self.target and root.left == None and root.right == None:
            path = path.split(',')[:-1]
            for i in range(len(path)):
                path[i] = int(path[i])
            self.paths.append(path)
            
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        self.paths = []
        if root == None:
            return self.paths
        self.target = targetSum
        self.dfs(root, str(root.val)+',', root.val)
        return self.paths

// Leetcode 1881 - Maximum Value after Insertion

class Solution1881 {
    public String maxValue(String n, int x) {
        StringBuilder ans = new StringBuilder();
        int insert = -1;
        if( n.charAt(0) == '-' ){
            for(int i=1; i < n.length(); i++){
                if( n.charAt(i) > x + 48 ){
                    insert = i;
                    break;
                }
            }
            ans.append("-");
            for(int i=1; i < n.length(); i++){
                if( i == insert ) ans.append(String.valueOf(x));
                ans.append(n.charAt(i));
            }
            if( insert == -1 ) ans.append(String.valueOf(x));
        }
        else{
            for(int i=0; i < n.length(); i++){
                if( n.charAt(i) < x + 48 ){
                    insert = i;
                    break;
                }
            }
            for(int i=0; i < n.length(); i++){
                if( i == insert ) ans.append(String.valueOf(x));
                ans.append(n.charAt(i));
            }
            if( insert == -1 ) ans.append(String.valueOf(x));
        }
        return ans.toString();
    }
}

// Leetcode 78 - Subsets

class Solution78:
    def __init__(self):
        self.sets = []
        self.keys = set()
    
    def generate_key(self, nums, d):
        key = ""
        for i in nums:
            key += str(i) + ','
        if key not in self.keys:
            self.keys.add(key)
            self.sets.append(nums)
            d.append(nums)
        
    def dfs(self, m, n, sets, nums):
        if m < n:
            for i in range(m, n):
                d = []
                f = False
                for j in sets:
                    c = []
                    for elem in j:
                        c.append(elem)
                        if elem == nums[i]:
                            f = True
                            break
                    if f == False:
                        c.append(nums[i])
                        c = sorted(c)
                        self.generate_key(c, d)
                    f = False
                self.dfs(m+1, n, d, nums)

    def subsets(self, nums):
        sets = [[]]
        self.dfs(0, len(nums), sets, nums)
        self.sets.append([])
        return self.sets

// Leetcode 91 - Decode Ways

class Solution91 {
    public int numDecodings(String s) {
        int n = s.length();
        int m = 0;
        int[] dp = new int[n+1];
        dp[n] = 1;
        if( s.charAt(n-1) != '0' ) dp[n-1] = 1;

        for(int i=n-2; i > -1; i--){
            if( s.charAt(i) != '0' ) dp[i] = dp[i+1];
            m = 10 * (s.charAt(i) - 48) + s.charAt(i+1) - 48;
            if( m >= 10 && m <= 26 ) dp[i] += dp[i+2];
        }

        return dp[0];
    }
}

// Leetcode 639 - Decode Ways II

class Solution639 {
    public int numDecodings(String s) {
        int n = s.length();
        int m = 0;
        long[] dp = new long[n+1];
        dp[n] = 1;
        if( s.charAt(n-1) != '0' ){
            if( s.charAt(n-1) == '*' ) dp[n-1] = 9;
            else dp[n-1] = 1;
        }

        for(int i=n-2; i > -1; i--){
            if( s.charAt(i) != '0' ){
                dp[i] = dp[i+1];
                if( s.charAt(i) == '*' ){
                    dp[i] *= 9;
                    if( s.charAt(i+1) == '*' ){
                        dp[i] += 15 * dp[i+2];
                    }
                    else{
                        m = 20 + s.charAt(i+1) - 48;
                        if( m >= 10 && m <= 26 ) dp[i] += dp[i+2];
                        dp[i] += dp[i+2];
                    }
                }
                else{
                    if( s.charAt(i+1) == '*' ){
                        if( s.charAt(i) == 49 ){
                            dp[i] += 9 * dp[i+2];
                        }
                        else if( s.charAt(i) == 50 ) dp[i] += 6 * dp[i+2];
                    }
                    else{
                         m = 10 * (s.charAt(i) - 48) + s.charAt(i+1) - 48;
                        if( m >= 10 && m <= 26 ) dp[i] += dp[i+2];
                    }
                }
            }
            dp[i] = dp[i] %  1000000007;
            // a MOD b + c MOD b = (a+c) MOD b
        }   
        return (int)dp[0];
    }
}